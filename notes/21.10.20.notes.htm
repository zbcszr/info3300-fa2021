<html><head>
<title>INFO 3300 - October 20</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  
  <style>
  
  .neighborhood {
    fill: #eee;
    stroke: white;
    stroke-width: 2px;
  }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for October 20</h3>
  <p>
    Today's data (both geoJSON and CSV) comes from the <a href="https://datasf.org/opendata/">DataSF</a> municipal open data initiative. I used <a href="https://mapshaper.org/">mapShaper</a> to convert the geoJSON file into a topoJSON file, which is much smaller.
  </p>
  <p>
    More on <a href="https://github.com/d3/d3-geo">d3.geo</a> and its <a href="https://github.com/d3/d3-geo#azimuthal-projections">geographic projections</a>.
  </p>

  <h5>HTML for today:</h5>

  <svg id="points" height="900" width="900" style="background: #fff; margin-top:50px" >

  </svg>
  
  

  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>


  <!--- Code for today's class --->
  <script id="notes1">

  const svg = d3.select("#points");
  const width = svg.attr("width");
  const height = svg.attr("height");
  const margin = { top: 20, right: 20, bottom: 20, left:20};
  const mapWidth = width - margin.left - margin.right;
  const mapHeight = height - margin.top - margin.bottom;
  const map = svg.append("g")
                  .attr("transform","translate("+margin.left+","+margin.top+")");

  // Let's make a map of all of the municipal trees in San Francisco
  // With any luck, we ought to be able to visualize the streets/blocks in the city, since trees line them
  //   (this is really just an excuse to make a lot of dots)
  
  // Datasets for today:
  //  "../datasets/SF-Neighborhoods.json"
  //  "../datasets/Street_Tree_List_smaller.csv"


  // 1. Make the visualization
  //  (refer to 10/13 notes for more comments on async functions)
  const requestData = async function() {
    
    const sf = await d3.json("../datasets/SF-Neighborhoods.json");
    console.log(sf);
    
    // We find that the feature we want to visualize is the SFNeighborhoods property within objects
    //  Always search .objects for different features to show in a topoJSON dataset
    var neighborhoods = topojson.feature(sf, sf.objects.SFNeighborhoods);
    
    // We use Mercator projection instead of a "better" projection because it's more familiar
    // It also leads to a flat line on the bottom of the city due to how the projection makes all
    //  latitude lines flat (which allows rhumb line equivalency)
    var projection = d3.geoMercator().fitSize([mapWidth, mapHeight], neighborhoods);
    var path = d3.geoPath().projection(projection);
    
    // Draw neighborhoods
    // Just as in our line generators, the scale is used by the generator to take complex data and
    //  generate fancy paths
    map.selectAll("path.neighborhood").data(neighborhoods.features)
      .join("path")
      .attr("class", "neighborhood")
      .attr("d", path);
      
      
    // Import tree dataset
    const trees = await d3.csv("../datasets/Street_Tree_List_smaller.csv");
    
    // We need to figure out where to position the dots. Since we may have a lot of them, let's process
    //  the data ahead of time and add to our dict
    trees.forEach( d => {
      
      // Use the projection just like a scale to convert from lng/lat to pixels
      // Make ABSOLUTELY SURE to use longitude, latitude order here -- reversing them gives weird results
      d.Position = projection( [d.Longitude, d.Latitude] );
      
    });
    // (Specifically: if we instead did this during the join then we would have to call projection() twice, 
    //     once for 'cx' and once for 'cy')
    
    // Draw circles using the Positions we just made
    map.selectAll("circle").data(trees)
       .join("circle")
       .attr("r", 1)
       .attr("fill", "forestgreen")
       .attr("opacity", 0.4)
       .attr("cx", d => d.Position[0])
       .attr("cy", d => d.Position[1]);
    
    
    
  }
  requestData();
  
  
  </script>
  

  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  
  function sanitize(s) {
    return s.replace("<br>", "\\n")
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
          }
    document.getElementById("display1").innerHTML = sanitize( document.getElementById("notes1").innerText);
    hljs.highlightAll();
  </script>


  </div>
</body>
</html>
